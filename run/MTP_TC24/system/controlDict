/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                               |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


libs (
      "libOpenFOAM.so"
      "libsimpleSwakFunctionObjects.so"
      "libswakFunctionObjects.so"
      "libgroovyBC.so"
     );

application     myConjugateFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         15000;

deltaT          1;

writeControl    timeStep;

writeInterval   1000;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
    planeExit
    {
        type swakExpression;
        valueType surface;
	outputControl timeStep;
        surfaceName cutPlaneExit;
        region fluid;
        surface {
            type plane;
            basePoint       (0.30899 0 0);
            normalVector    (1 0 0);
            interpolate false;
        }
        verbose true;
        expression "sum(rho*U.x*T*area())/sum(rho*U.x*area())";
        accumulations (
            average
        );
    }
  inletVelocity
  {
    	type swakExpression;
    	valueType surface;
	outputControl timeStep;    
    	region fluid;
    	surfaceName cutPlaneInlet;
    	surface
    	{
      		type plane;
      		basePoint (0.01701 0 0);
      		normalVector (1 0 0);
      		interpolate no;
    	}
    	verbose yes;
    	expression "sum(U.x*area())/sum(area())";
    	accumulations
      	(
        	average
      	);
  }
  inletPressure
  {
    	type swakExpression;
    	valueType surface;
	outputControl timeStep;    
    	region fluid;
    	surfaceName cutPlaneInlet1;
    	surface
    	{
      		type plane;
      		basePoint (0.01701 0 0);
      		normalVector (1 0 0);
      		interpolate no;
    	}
    	verbose yes;
    	expression "sum(p*area())/sum(area())";
    	accumulations
      	(
        	average
      	);
  }    

}; 

// ************************************************************************* //
