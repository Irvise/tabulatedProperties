// -*- C++ -*-
// File generated by PyFoam - sorry for the ugliness

FoamFile
{
 version 2.0;
 format ascii;
 class dictionary;
 object controlDict;
}

libs
  (
    "libOpenFOAM.so"
    "libsimpleSwakFunctionObjects.so"
    "libswakFunctionObjects.so"
    "libgroovyBC.so"
  );

application myFluidFoam;

startFrom latestTime;

startTime 0;

stopAt endTime;

endTime 3000;

deltaT 1;

writeControl timeStep;

writeInterval 100;

purgeWrite 0;

writeFormat ascii;

writePrecision 6;

writeCompression no;
timeFormat general;

timePrecision 6;

runTimeModifiable yes;
functions
{
    enth0.00046875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00046875;
	    surface {
		    type	plane;
		    basePoint	(0.00046875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.00140625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00140625;
	    surface {
		    type	plane;
		    basePoint	(0.00140625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.00234375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00234375;
	    surface {
		    type	plane;
		    basePoint	(0.00234375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.00328125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00328125;
	    surface {
		    type	plane;
		    basePoint	(0.00328125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.00421875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00421875;
	    surface {
		    type	plane;
		    basePoint	(0.00421875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.00515625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00515625;
	    surface {
		    type	plane;
		    basePoint	(0.00515625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.00609375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00609375;
	    surface {
		    type	plane;
		    basePoint	(0.00609375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.00703125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00703125;
	    surface {
		    type	plane;
		    basePoint	(0.00703125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.00796875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00796875;
	    surface {
		    type	plane;
		    basePoint	(0.00796875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.00890625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00890625;
	    surface {
		    type	plane;
		    basePoint	(0.00890625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.00984375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00984375;
	    surface {
		    type	plane;
		    basePoint	(0.00984375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.01078125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01078125;
	    surface {
		    type	plane;
		    basePoint	(0.01078125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.01171875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01171875;
	    surface {
		    type	plane;
		    basePoint	(0.01171875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.01265625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01265625;
	    surface {
		    type	plane;
		    basePoint	(0.01265625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.01359375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01359375;
	    surface {
		    type	plane;
		    basePoint	(0.01359375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.01453125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01453125;
	    surface {
		    type	plane;
		    basePoint	(0.01453125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.01546875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01546875;
	    surface {
		    type	plane;
		    basePoint	(0.01546875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.01640625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01640625;
	    surface {
		    type	plane;
		    basePoint	(0.01640625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.01734375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01734375;
	    surface {
		    type	plane;
		    basePoint	(0.01734375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.01828125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01828125;
	    surface {
		    type	plane;
		    basePoint	(0.01828125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.01921875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01921875;
	    surface {
		    type	plane;
		    basePoint	(0.01921875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.02015625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02015625;
	    surface {
		    type	plane;
		    basePoint	(0.02015625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.02109375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02109375;
	    surface {
		    type	plane;
		    basePoint	(0.02109375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.02203125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02203125;
	    surface {
		    type	plane;
		    basePoint	(0.02203125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.02296875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02296875;
	    surface {
		    type	plane;
		    basePoint	(0.02296875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.02390625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02390625;
	    surface {
		    type	plane;
		    basePoint	(0.02390625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.02484375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02484375;
	    surface {
		    type	plane;
		    basePoint	(0.02484375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.02578125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02578125;
	    surface {
		    type	plane;
		    basePoint	(0.02578125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.02671875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02671875;
	    surface {
		    type	plane;
		    basePoint	(0.02671875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.02765625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02765625;
	    surface {
		    type	plane;
		    basePoint	(0.02765625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.02859375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02859375;
	    surface {
		    type	plane;
		    basePoint	(0.02859375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    enth0.02953125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02953125;
	    surface {
		    type	plane;
		    basePoint	(0.02953125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*he*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.00046875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00046875;
	    surface {
		    type	plane;
		    basePoint	(0.00046875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.00140625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00140625;
	    surface {
		    type	plane;
		    basePoint	(0.00140625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.00234375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00234375;
	    surface {
		    type	plane;
		    basePoint	(0.00234375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.00328125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00328125;
	    surface {
		    type	plane;
		    basePoint	(0.00328125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.00421875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00421875;
	    surface {
		    type	plane;
		    basePoint	(0.00421875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.00515625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00515625;
	    surface {
		    type	plane;
		    basePoint	(0.00515625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.00609375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00609375;
	    surface {
		    type	plane;
		    basePoint	(0.00609375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.00703125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00703125;
	    surface {
		    type	plane;
		    basePoint	(0.00703125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.00796875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00796875;
	    surface {
		    type	plane;
		    basePoint	(0.00796875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.00890625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00890625;
	    surface {
		    type	plane;
		    basePoint	(0.00890625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.00984375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.00984375;
	    surface {
		    type	plane;
		    basePoint	(0.00984375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.01078125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01078125;
	    surface {
		    type	plane;
		    basePoint	(0.01078125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.01171875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01171875;
	    surface {
		    type	plane;
		    basePoint	(0.01171875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.01265625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01265625;
	    surface {
		    type	plane;
		    basePoint	(0.01265625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.01359375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01359375;
	    surface {
		    type	plane;
		    basePoint	(0.01359375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.01453125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01453125;
	    surface {
		    type	plane;
		    basePoint	(0.01453125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.01546875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01546875;
	    surface {
		    type	plane;
		    basePoint	(0.01546875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.01640625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01640625;
	    surface {
		    type	plane;
		    basePoint	(0.01640625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.01734375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01734375;
	    surface {
		    type	plane;
		    basePoint	(0.01734375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.01828125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01828125;
	    surface {
		    type	plane;
		    basePoint	(0.01828125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.01921875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.01921875;
	    surface {
		    type	plane;
		    basePoint	(0.01921875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.02015625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02015625;
	    surface {
		    type	plane;
		    basePoint	(0.02015625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.02109375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02109375;
	    surface {
		    type	plane;
		    basePoint	(0.02109375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.02203125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02203125;
	    surface {
		    type	plane;
		    basePoint	(0.02203125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.02296875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02296875;
	    surface {
		    type	plane;
		    basePoint	(0.02296875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.02390625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02390625;
	    surface {
		    type	plane;
		    basePoint	(0.02390625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.02484375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02484375;
	    surface {
		    type	plane;
		    basePoint	(0.02484375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.02578125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02578125;
	    surface {
		    type	plane;
		    basePoint	(0.02578125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.02671875
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02671875;
	    surface {
		    type	plane;
		    basePoint	(0.02671875 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.02765625
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02765625;
	    surface {
		    type	plane;
		    basePoint	(0.02765625 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.02859375
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02859375;
	    surface {
		    type	plane;
		    basePoint	(0.02859375 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    temp0.02953125
    {
	    type	swakExpression;
	    outputControl	timeStep;
	    valueType	surface;
	    surfaceName	cutPlane0.02953125;
	    surface {
		    type	plane;
		    basePoint	(0.02953125 0 0);
		    normalVector	(1 0 0);
		    interpolate	false;
	    }
	    verbose	true;
	    expression	"sum(rho*U.x*T*area())/sum(rho*U.x*area())";
	    accumulations (
		    average
	    );
    }
    heatFlux0.00046875
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.00046875;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0 && pos().x < 0.0009384375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.00140625
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.00140625;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0009365625 && pos().x < 0.0018759375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.00234375
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.00234375;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.001873125 && pos().x < 0.0028134375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.00328125
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.00328125;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0028096875 && pos().x < 0.0037509375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.00421875
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.00421875;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.00374625 && pos().x < 0.0046884375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.00515625
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.00515625;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0046828125 && pos().x < 0.0056259375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.00609375
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.00609375;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.005619375 && pos().x < 0.0065634375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.00703125
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.00703125;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0065559375 && pos().x < 0.0075009375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.00796875
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.00796875;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0074925 && pos().x < 0.0084384375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.00890625
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.00890625;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0084290625 && pos().x < 0.0093759375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.00984375
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.00984375;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.009365625 && pos().x < 0.0103134375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.01078125
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.01078125;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0103021875 && pos().x < 0.0112509375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.01171875
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.01171875;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.01123875 && pos().x < 0.0121884375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.01265625
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.01265625;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0121753125 && pos().x < 0.0131259375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.01359375
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.01359375;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.013111875 && pos().x < 0.0140634375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.01453125
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.01453125;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0140484375 && pos().x < 0.0150009375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.01546875
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.01546875;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.014985 && pos().x < 0.0159384375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.01640625
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.01640625;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0159215625 && pos().x < 0.0168759375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.01734375
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.01734375;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.016858125 && pos().x < 0.0178134375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.01828125
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.01828125;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0177946875 && pos().x < 0.0187509375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.01921875
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.01921875;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.01873125 && pos().x < 0.0196884375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.02015625
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.02015625;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0196678125 && pos().x < 0.0206259375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.02109375
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.02109375;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.020604375 && pos().x < 0.0215634375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.02203125
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.02203125;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0215409375 && pos().x < 0.0225009375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.02296875
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.02296875;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0224775 && pos().x < 0.0234384375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.02390625
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.02390625;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0234140625 && pos().x < 0.0243759375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.02484375
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.02484375;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.024350625 && pos().x < 0.0253134375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.02578125
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.02578125;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0252871875 && pos().x < 0.0262509375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.02671875
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.02671875;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.02622375 && pos().x < 0.0271884375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.02765625
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.02765625;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0271603125 && pos().x < 0.0281259375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.02859375
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.02859375;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.028096875 && pos().x < 0.0290634375) ? flux : 0";
     	accumulations ( sum ); 
    }
    heatFlux0.02953125
    {
	    type	patchExpression;
	    enabled	true;
	    patches (
		    hot 
		    sideWall 
	    );
	    variables ( 
		    "position=0.02953125;"
		    "flux=myWallHeatFlux*area();"
	    );
	    expression "( pos().x >0.0290334375 && pos().x < 0.0300009375) ? flux : 0";
     	accumulations ( sum ); 
    }    
    outletTemperature
    {
        type swakExpression;
        valueType patch;
	outputControlMode deltaT;
	outputDeltaT	1;
    	patchName outlet;
        verbose true;
        expression "sum(rho*U.x*T*area())/sum(rho*U.x*area())";
        accumulations (
            average
        );
    }
};

