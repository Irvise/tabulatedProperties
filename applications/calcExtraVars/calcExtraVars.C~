/*---------------------------------------------------------------------------*\
License
    This file is meant ot be used with OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Application
    specificHeat

Description
    Calculates and writes the scalar field cp at each time.
    Based on OpenFOAM's "pPrime2" and buoyantSimpleFoam.

\*---------------------------------------------------------------------------*/

#include "fvCFD.H"
#include "basicThermo.H"


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

int main(int argc, char *argv[])
{
    timeSelector::addOptions();

#   include "setRootCase.H"
#   include "createTime.H"

    instantList timeDirs = timeSelector::select0(runTime, args);

#   include "createMesh.H"

    runTime.setTime(timeDirs.last(), timeDirs.size()-1);


    Info<< "Reading thermophysical properties\n" << endl;

    autoPtr<basicThermo> pThermo
    (
        basicThermo::New(mesh)
    );
    basicThermo& thermo = pThermo();

    forAll(timeDirs, timeI)
    {
        runTime.setTime(timeDirs[timeI], timeI);

        Info<< "Time = " << runTime.timeName() << endl;

        mesh.readUpdate();

        Info<< "    Calculating Cp" << endl;
        volScalarField Cp
        (
            IOobject
            (
                "Cp",
                runTime.timeName(),
                mesh,
                IOobject::NO_READ,
                IOobject::AUTO_WRITE
            ),
            thermo.cpv()
        );

        Cp.write();

        Info<< "    Calculating kappa" << endl;
        volScalarField kappa
        (
            IOobject
            (
                "kappa",
                runTime.timeName(),
                mesh,
                IOobject::NO_READ,
                IOobject::AUTO_WRITE
            ),
            thermo.kappa()
        );

        kappa.write();

        Info<< "    Calculating enthalpy" << endl;
        volScalarField he
        (
            IOobject
            (
                "he",
                runTime.timeName(),
                mesh,
                IOobject::NO_READ,
                IOobject::AUTO_WRITE
            ),
            thermo.he()
        );

        he.write();

        Info<< endl;
    }

    return 0;
}


// ************************************************************************* //
